module setup

  implicit none 
  integer, parameter:: dp = kind(0.d0)
  integer, save :: i, j
  real (dp), save :: x0, xf, t0, tf, dx, dt, C
 

contains

  subroutine grid_init(x,t,dx,dt,N,C,tN,x0,xf,t0,tf)
    integer, intent(in) :: N,tN
    real(dp), intent(in):: x0,xf,t0,tf
    real(dp), dimension(:), allocatable, intent(out):: x,t
    real(dp), intent(out) :: dx , dt, C

    !! use to set up the grid

    allocate(x(N+4), t(tN))
    x= 0.0
    t=0.0
    dx = (xf-x0) / N
    dt = (tf - t0) / tN

    x(1) = x0 - 1.5 * dx    
    x(2) = x0 - 0.5 * dx
    x(N+3) = xf + 0.5 * dx 
    x(N+4) = xf + 1.5 * dx

    do i =3,N+2
       x(i) = x0 + (i-.5)*dx
    end do

    do i = 1,tN
       t(i) =i *dt
    end do

    C = dt/dx
  end subroutine grid_init




  subroutine ex1_ic(u0, uN,u ,x , N ,tN)
    real (dp), dimension(:), allocatable, intent(in) :: x
    real (dp), dimension(:), allocatable, intent(out) :: u0, uN
    real (dp), dimension(:,:), allocatable, intent(out) :: u
    integer :: N ,tN
    allocate(u0(size(x)), uN(size(x)), u(tN,size(x))) 
            u0 = 2.0  
            do i = 1, N 
                if (x(i) > 0.5) then 
                    u0(i) = -1.0 
                end if
            end do
            uN = 0.0              
            u  = 0.0 
  


          end subroutine ex1_ic








end module setup



  
